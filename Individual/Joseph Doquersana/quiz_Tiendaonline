create database dbTiendaONline;
use dbtiendaONline;
create table Producto(
idProducto int auto_increment primary key ,
codigoBacrras int unique,
nombre VARCHAR(100) NOT NULL,
precioProduto float NOT NULL,
cantidadProducto int  
);

create table Usuario(
idUsuario int auto_increment primary key,
rolUruario VARCHAR(50) NOT NULL,
nombre VARCHAR(100) NOT NULL,
telefono VARCHAR(20),
direccion VARCHAR(200)
);

create table Clientes(
idCLiente int auto_increment primary key,
nombreCliente VARCHAR(100) NOT NULL,
telefonoCliente VARCHAR(20),
nacimientoCliente varchar(20)
);
 
create table Ventas(
idVenta int auto_increment primary key,
fecha varchar(20) not null,
totalVentas varchar(50) not null,
productosV varchar(50) not null,
idClienteFK int not null,
idUsuarioFk int not null
);
create table detallesVentas(
idDetalleV int auto_increment primary key,
idVentaFK int,
idProductoFk int,
totalProducto int,
cantidadVentas int
);
alter table Ventas
add constraint idCliente
foreign key (idClienteFK)
references Clientes(idCliente);

alter table Ventas
add constraint idUsuario
foreign key (idUsuarioFk)
references Usuario(idUsuario);

alter table detallesVentas
add constraint IdVenta
foreign key (idVentaFK)
references Ventas(idVenta);

alter table detallesVentas
add constraint idProducto
foreign key (idProductoFk)
references Producto(idProducto);
 
 alter table Ventas 
 add numeroV varchar (50) not null;

describe Producto;

describe Usuario;

describe Clientes;

describe Ventas;

describe detallesVentas;

insert into Producto value('',1968,'pollo',10500,16),('',15584,'sal',2600,50),('',198532,'azucar',1000,25),('',48685,'calzones',14000,43);

insert into Producto value('',1222,'pañales',5500,30),('',1623,'zapatos para bebe',15300,10);

insert into Usuario value('','empleado','felipe castillo',8478497710,'6261 Cornell Station Apt. 975'),('','empleado','Rocio Moral Hijo',2593633313,'Carretera Delvalle, Nro 0'),('','comprador','العنود الحصين',3205426185,'54542 شارع هند الزامل'),('','comprador','Mabel Cummerata',5209184378,'3155 Pouros Grove Apt. 746');

insert into Usuario value('','empleado','joseph doqueresana',3209680055,'call 53 sur 81 i 31 ');

insert into Clientes value('','jose alexander',60154036615,'may-19-2000'),('','maria estefania',079809578022,'ene-01-1983'),('','Lulut Ajiman Prasasta S.IP',1481260,'dic-24-2003'),('','Gbeminiyi Iyalla',08108206337,'jul-23-1989');

insert into Clientes value('','tatiana cabrera',60154036618,'mar-16-1982');

insert into Ventas value('','mar-20-2020',15000,'sal,asucar',1,1,'2020 03 20'),('','jun-01-2015',60000,'pollo',2,2,'2015 07 01'),('','ene-19-2010',30000,'calzones,azucar',3,3,'2010 01 19'),('','may-09-2022',19000,'calsones,sal',4,4,'2022 02 09');

insert into Ventas value('','feb-20-2020',51400,'pañales,zapatos para bebe',5,5,'2020 02 20');

insert into Ventas value('','jul-20-2010',34400,'sal,pollo',2,1,'2010 07 20');

insert into detallesVentas value('',1,1,15000,13),('',2,2,60000,36),('',3,3,30000,13),('',4,4,19000,19);

insert into detallesventas value('',5,5,51400,13);

insert into detallesventas value('',2,1,34400,7);

select * from Producto;

select precioProduto as 'precio', nombre from Producto order by precio asc;

select nombreCliente,nacimientoCliente from Clientes where nacimientoCliente like 'ene%';

select nombre,rolUruario from Usuario where rolUruario='empleado';

select idClienteFK,fecha from Ventas where fecha like '%mar%' or fecha like '%abr%' or fecha like'%may%' or fecha like'%jun%';

select nombre  from Producto where nombre like '%r%';

select idClienteFK,totalVentas from Ventas where totalVentas=15000 or totalVentas=30000;

select avg(cantidadVentas) from detallesVentas;

select count(cantidadVentas) from detallesVentas;

select count(idCLiente) as 'cantidad de clientes' from Clientes;

select min(totalVentas) as 'venta mas economica' from Ventas;

select idClienteFK as 'cliente con precio mas alto', max(totalVentas) as 'venta mas alta' from Ventas;

select * from Ventas inner join Clientes on Ventas.idClienteFK = Clientes.idCliente; 

select V.*,C.idCliente from Ventas V inner join CLientes C  on V.idClienteFK = C.idCliente ;

select Ventas.idClienteFk ,CLientes.nombreCliente ,detallesVentas.totalProducto, max(totalProducto) from Ventas  inner join Clientes  on Ventas.idClienteFK = CLientes.idCliente 
inner join detallesVentas on Ventas.idVenta = detallesVentas.idVentaFK;

select Ventas.productosV ,Clientes.idCliente , Usuario.idUsuario from Ventas inner join Clientes on Ventas.idClienteFK = Clientes.idCliente
inner join Usuario on Ventas.idUsuarioFK = Usuario.idUsuario
where productosV like '%pollo%';

select Ventas.productosV ,Clientes.idCLiente from Ventas inner join Clientes on Ventas.idClienteFK = Clientes.idCliente
where Ventas.idClienteFK=1;

select Clientes.idCliente, Clientes.nombreCliente from Clientes inner join Ventas on Clientes.idCliente = Ventas.idClienteFK;

update Clientes set nombreCliente='Tatiana Cabrera Vargas',nacimientoCliente='24/11/1985'  where idCliente=5; ;

update Ventas set numeroV='2024 09 27'where idVenta=5 ;

delete from Ventas where numeroV='2024 09 27';
 
insert into Clientes value('55163118','Tatiana Cabrera Vargas',6041536698,'24/11/1985');
update Ventas set idClienteFK='55163118' where idClienteFK=5;
delete from Clientes where idCliente=5;

select *from Ventas;
select * from Usuario;
select * from Clientes;
describe Producto;
DELIMITER //
create procedure registrarProductos( idProducto int(11),codigoBacrras int(11),nombre varchar(50),precioProduto float,cantidadProducto int(11))
begin 
insert into producto value (idProducto,codigoBacrras,nombre,precioProduto,cantidadProducto);
end//
DELIMITER ;
/* para elminar un procedimiento 
drop procedure registrarProductos;
*/
call registrarProductos('',168598,'lechuga',5600,20);
select * from Producto;

DELIMITER //

create procedure cambiarNombreProductos(id int(11),codigoBacrras int(11),nom varchar(50),precioProduto float,cantidadProducto int(11))
begin 
update Producto set nombre=nom where idProducto=id;
end//

DELIMITER ;

call cambiarNombreProductos(7,168598,'piscina',5600,20);
create view consultarCliente as 
select * from CLientes;

select * from consultarCliente;

DELIMITER //
/*cambiarlo a yn inver join*/
create procedure verProductoCliente(idVenta int,fecha varchar(20),totalVentas varchar(50),producV varchar(50),idClienteFK int,idUsuarioFk int)
begin 
select productoV from Ventas where productosV=producV;
end //

create procedure cambiarFechaNacimiento(idCLien int,nombreCliente varchar(100),telefonoCliente varchar(20),nCliente varchar(20))
begin 
update Clientes set nacimientoCliente=nCliente where idCliente=idCLien;
end //

create procedure inactivarCliente(idCLient int,nombreC varchar(100),telefonoC varchar(20),nacimientoC varchar(20))
begin 
update Clientes set nombreCliente=nombreC and telefonoCliente=telefonoC  and nacimientoCliente=nacimientoC  where idCliente=idCLient;
end //

DELIMITER ;

create view consultarCliente as 
select productosV and numeroV from Ventas ;

describe Producto;

select * from Producto;
create view clientesMasCompras as 
select count(idCLienteFK)>1 as 'mas compras' from Ventas;

/*calcular los produsctos que se vendan a un precio mayor del promedio de todos los productos */
select idProducto,nombre,precioProduto
from Producto where precioProduto>(select avg(precioProduto)
from Producto);

select * from Ventas;
describe Clientes;
/*mostrar los clientes que compren el total de compra sea mayor al promedio de compras de la tienda*/
select idClienteFK,idVenta,totalVentas
from Ventas
where idVenta in (select idClienteFK from Clientes where totalventas>(select avg(totalventas)));
select avg(totalventas) from Ventas;
/*calcular el promedio de precios de producto comprados por clientes */
select idEmpleado,nombreEmpleado,salario
from empleado where salario>(select avg(salario)
from empleado);

/*sub consultas 
son consultas que se hacen para una consulta mas grande 
select campo2 , campo3 from tablanegra 
where columna2 =(select columna2x from otratabal where condicion);
*/
/*
consultar los datos de los empleados y s sueldo promedio 
select idEmpleado, nombreEmpleado, salario,(select avg(salario)
from empleado )as promedio
from empleado;
consultar el empleado que tenga el sueldo mayor al promedio 
select idEmpleado,nombreEmpleado,salario
from empleado where salario>(select avg(salario)
from empleado);

comsultar a que area pertenece un empleado 
select idEmpleado,nombreEmpleado,idArea,nombreArea
from empleado
where idArea in (select idArea from area where nombreEmpleado='Juan')
*/


/*crear un prodecimiento para innactivar un cliente 
otro para consultar los prodyuctos que a comprado un cliente 
procedimiento para modificar la fecha de nacmiento cliente
y crear dos vistas una que cliente compro un producto y su numero de orden 
y otra vista que muestre el cliente que haya echo mas compras */
/*procedimientos almacenados -subrutinas almacenar la inrformacion
delimiter//
create procedure nombre_procedimiento (parametros)
begin
--logica sentencia que se quiera utilizar 
end//
delimiter;
*/
/*crear una base de datos llamada tienda online 
2 habilitar la bd
3 crear tablas producto(id auto increment, codigo de barras  ) , usuario , clientes( id auto incement ) ,ventas(auto increment, numero de ventas ) 
4 realizar relaciones (atributos los que queramos )
un cliente puede realizar muchas ordenes o ventas 
un usuario puede realizar muchas ordenes 
un cliente puede comprar mucho productos 
una orden puede tener muchos productos
un producto puede ser comprado muchas veces 
5 4 inserciones por tabla 
6 realizar las siguientes consultas 
 consulta general de todos los productos 
 ordenar productos por precio de menor precio a mayor 
 consultar los clientes que nacen en enero 
 consultar los usuarios con rol empleado 
 consultar las ordenes generadas entre marzo y junio 
 consultar productos que contenga la letra r
 consultar las ventas que tengan productos con precio de 15 mil o 30 mil
promedio de ventas
e total de ventas 
cantidad de clientes
venta mas economica realizada
consultar el cleinte de la maxima venta echa 
usuario y cliente de una venta especifica
consultar los productos que compro un cliente especifico
consultar todos los clientes que han echo una orden*/
